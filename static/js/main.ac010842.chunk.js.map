{"version":3,"sources":["logo.svg","FilterList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FilterList","list","height","useState","filteredList","setFilteredList","searchBox","useRef","FormControl","placeholder","onChange","needle","current","value","filter","v","String","toLowerCase","includes","ref","ListGroup","style","width","itemSize","itemCount","length","index","Item","App","fileInput","rawConfig","errorMsgs","setErrorMsgs","datasets","setDatasets","title","cursor","sync","key","inputs","label","data","stroke","visualizations","setVisualizations","datasetModalID","setDatasetModalID","useEffect","plots","i","visualization","series","j","dataPathStr","otherInputs","dataPath","split","dataset","existingMsgs","parsed","map","row","devicePixelRatio","undefined","opts","window","innerWidth","scales","x","time","plotContainer","document","getElementById","push","uPlot","forEach","plot","destroy","className","Container","href","msg","idx","Table","bordered","hover","striped","file","name","Button","size","onClick","type","multiple","files","Papa","parse","header","skipEmptyLines","error","err","message","console","complete","results","errors","log","existingDatasets","id","JSON","stringify","rawConfigStr","src","logo","alt","target","rel","Modal","show","onHide","dialogClassName","Header","closeButton","Title","Body","meta","fields","Footer","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qRAAe,G,MAAA,IAA0B,kC,yGCyC1BA,MApCf,YAA8E,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,OAA8C,EACjCC,mBAASF,GADwB,mBAClEG,EADkE,KACpDC,EADoD,KAEnEC,EAAYC,iBAAO,MAWzB,OACI,gCACI,cAACC,EAAA,EAAD,CAAaC,YAAY,SAASC,SAX1C,WAA8B,IAAD,EACnBC,EAAM,UAAGL,EAAUM,eAAb,aAAG,EAAmBC,MACpB,MAAVF,GACAN,EACIJ,EAAKa,QAAO,SAACC,GAAD,OAAOC,OAAOD,GAAGE,cAAcC,SAASP,EAAOM,oBAOAE,IAAKb,IACpE,cAACc,EAAA,EAAD,CAAWC,MAAO,CAAEnB,UAApB,SACI,cAAC,IAAD,UACK,gBAAGA,EAAH,EAAGA,OAAQoB,EAAX,EAAWA,MAAX,OACG,cAAC,IAAD,CACIA,MAAOA,EACPpB,OAAQA,EACRqB,SAAU,GACVC,UAAWpB,EAAaqB,OAJ5B,SAMK,gBAAGC,EAAH,EAAGA,MAAOL,EAAV,EAAUA,MAAV,OACG,cAACD,EAAA,EAAUO,KAAX,CAAgBN,MAAOA,EAAvB,SAA+BjB,EAAasB,iBCwR7DE,MA7Sf,WAAgB,IAAD,MACLC,EAAYtB,iBAAO,MACnBuB,EAAYvB,iBAAO,MAFd,EAGuBJ,mBAAS,IAHhC,mBAGJ4B,EAHI,KAGOC,EAHP,OAIqB7B,mBAC5B,IALO,mBAIJ8B,EAJI,KAIMC,EAJN,OAOiC/B,mBAAS,CACjD,CACIgC,MAAO,WACPjC,OAAQ,IACRkC,OAAQ,CACJC,KAAM,CACFC,IAAK,QAGbC,OAAQ,CACJ,CACIC,MAAO,WACPC,KAAM,kBAEV,CACID,MAAO,6BACPE,OAAQ,MACRpB,MAAO,EACPmB,KAAM,0BASlB,CACIN,MAAO,2BACPjC,OAAQ,IACRkC,OAAQ,CACJC,KAAM,CACFC,IAAK,QAGbC,OAAQ,CACJ,CACIC,MAAO,WACPC,KAAM,kBAEV,CACID,MAAO,mBACPE,OAAQ,OACRpB,MAAO,EACPmB,KAAM,gBAEV,CACID,MAAO,mBACPE,OAAQ,QACRpB,MAAO,EACPmB,KAAM,oBAzDX,mBAOJE,EAPI,KAOYC,EAPZ,OA+DiCzC,oBAAU,GA/D3C,mBA+DJ0C,EA/DI,KA+DYC,EA/DZ,KAiMX,OA/HAC,qBAAU,WACN,GAA8B,IAA1BJ,EAAelB,OAAnB,CAMA,IAFA,IAAMuB,EAAQ,GALF,WAOHC,GAKL,IAJA,IAAMC,EAAgBP,EAAeM,GAC7Bd,EAAkCe,EAAlCf,MAAOI,EAA2BW,EAA3BX,OAAQH,EAAmBc,EAAnBd,OAAQlC,EAAWgD,EAAXhD,OACzBuC,EAAO,GACPU,EAAS,GAXP,WAYCC,GAZD,MAaiDb,EAAOa,GAA9CC,EAbV,EAaIZ,KAAmBnB,EAbvB,EAauBA,MAAUgC,EAbjC,gCAcEC,EAAWF,EAAYG,MAAM,KAE7BC,EAAUxB,GAAUsB,EAAS,IACnC,IAAKE,EAKD,OAJAzB,GAAa,SAAC0B,GAAD,4BACNA,GADM,4BAEWL,EAFX,4BAE0CE,EAAS,GAFnD,2BAIb,WAEJd,EAAKW,GAAKK,EAAQE,OAAOlB,KAAKmB,KAC1B,SAACC,GAAD,OAAWA,EAAgCN,EAAS,OAExDJ,EAAOC,GAAP,aACI9B,MAAOA,EAAQA,EAAQwC,sBAAmBC,GACvCT,IAjBFF,EAAI,EAAGA,EAAIb,EAAOd,SAAU2B,EAAG,EAA/BA,GAoBT,IAAMY,EAAO,CACT7B,QACAC,SACAd,MAAO2C,OAAOC,WACdhE,SACAiE,OAAQ,CACJC,EAAG,CACCC,MAAM,IAGdlB,UAGEmB,EAAgBC,SAASC,eAAT,eAAgCvB,IAEtD,IAAKqB,EAKD,OAJAtC,GAAa,SAAC0B,GAAD,4BACNA,GADM,6CAE4BT,QAEnC,CAAN,UAGJD,EAAMyB,KAAK,IAAIC,IAAMV,EAAMvB,EAAM6B,KAhD5BrB,EAAI,EAAGA,EAAIN,EAAelB,SAAUwB,EAAG,CAAC,IAAD,IAAvCA,GAAuC,kCAmDhD,OAAO,WACHD,EAAM2B,SAAQ,SAACC,GAAD,OAAUA,EAAKC,iBAElC,CAAC5C,EAAUU,IAmEV,sBAAKmC,UAAU,MAAf,UACI,sBAAKA,UAAU,UAAf,UACI,eAACC,EAAA,EAAD,WACI,0DACA,6DAEI,mBAAGC,KAAK,iDAAR,yBAFJ,QAIA,0CACa,iDADb,sJAKCjD,EAAU6B,KAAI,SAACqB,EAAKC,GAAN,OACX,mBAAaJ,UAAU,gBAAvB,SACKG,GADGC,MAIZ,8BAAIjD,EAASR,OAAb,iBACA,eAAC0D,EAAA,EAAD,CAAOC,UAAQ,EAACC,OAAK,EAACC,SAAO,EAA7B,UACI,gCACI,+BACI,mCACA,8CACA,6CAGR,gCACKrD,EAAS2B,KAAI,SAACH,EAASyB,GAAV,aACV,+BACI,oBAAIJ,UAAU,eAAd,SAA8BI,IAC9B,oBAAIJ,UAAU,eAAd,mBAA8BrB,EAAQ8B,YAAtC,aAA8B,EAAcC,OAC5C,6BACI,cAACC,EAAA,EAAD,CAAQC,KAAK,KAAKC,QAAS,kBAAM7C,EAAkBoC,IAAnD,oCAQpB,uBAAOU,KAAK,OAAOzE,IAAKU,EAAWgE,UAAQ,IAC3C,wBAAQF,QA3GxB,WAA6B,IAAD,EACxB3D,EAAa,IAEb,IAAM8D,EAAK,UAAGjE,EAAUjB,eAAb,aAAG,EAAmBkF,MACjC,GAAKA,GAA0B,IAAjBA,EAAMrE,OAIpB,IAAK,IAAIwB,EAAI,EAAGA,EAAI6C,EAAMrE,SAAUwB,EAAG,CACnC,IAAMsC,EAAOO,EAAM7C,GACnB8C,IAAKC,MAAMT,EAAM,CACbU,QAAQ,EACRC,gBAAgB,EAChBC,MAAO,SAAsBC,EAAKb,GAC9BvD,GAAa,SAAC0B,GAAD,4BACNA,GADM,iCAES6B,QAFT,IAESA,OAFT,EAESA,EAAMC,KAFf,sBAEiCY,EAAIC,QAFrC,+CAIbC,QAAQH,MAAR,+BAA+BZ,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAMC,KAArC,YAAqDY,EAAK,QAASb,IAEvEgB,SAAU,SAAyBC,EAASjB,GACpCiB,EAAQC,OAAOhF,QACfO,GAAa,SAAC0B,GAAD,4BACNA,GADM,2BAEG6B,QAFH,IAEGA,OAFH,EAEGA,EAAMC,KAFT,kEAIbc,QAAQH,MACJ,wCACA,QACAZ,EACA,WACAiB,IAGJF,QAAQI,IAAI,oBAAqB,QAASnB,EAAM,WAAYiB,GAGhEtE,GAAY,SAACyE,GAAD,4BACLA,GADK,CAER,CAAEpB,OAAM5B,OAAQ6C,gBAlC5BxE,GAAa,SAAC0B,GAAD,4BAAsBA,GAAtB,CAAoC,+BAsGzC,4BAEHf,EAAeiB,KAAI,SAACV,EAAegC,GAAhB,OAChB,qBAAeJ,UAAU,OAAzB,SACI,qBAAK8B,GAAE,eAAU1B,MADXA,MAKd,eAACH,EAAA,EAAD,WACI,mDACA,sCACS,+CADT,+NAMA,0BAAU6B,GAAG,aAAazF,IAAKW,EAA/B,SACK+E,KAAKC,UAAU,CAAEnE,kBAAkB,KAAM,KAE9C,uBACA,wBAAQgD,QAjFxB,WAAiC,IAAD,EACtBoB,EAAY,UAAGjF,EAAUlB,eAAb,aAAG,EAAmBC,MACxC,GAAKkG,EAKL,IACInE,EAAkBiE,KAAKb,MAAMe,GAAcpE,gBAC7C,MAAOwD,GACLnE,GAAa,SAAC0B,GAAD,4BACNA,GADM,CAET,+DAEJ4C,QAAQH,MAAM,yBAA0BA,QAXxCnE,GAAa,SAAC0B,GAAD,4BAAsBA,GAAtB,CAAoC,wBA8EzC,uCAIR,yBAAQoB,UAAU,aAAlB,UACI,qBAAKkC,IAAKC,EAAMnC,UAAU,WAAWoC,IAAI,SACzC,yDACA,sCACS,+CADT,0BAGA,mBACIpC,UAAU,WACVE,KAAK,sBACLmC,OAAO,SACPC,IAAI,sBAJR,4BAUJ,eAACC,EAAA,EAAD,CACIC,KAAMzE,GAAkB,EACxB0E,OAAQ,kBAAMzE,GAAmB,IACjC0E,gBAAgB,gBAHpB,UAKI,cAACH,EAAA,EAAMI,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACL,EAAA,EAAMM,MAAP,oBAAc1F,EAASY,UAAvB,iBAAc,EAA0B0C,YAAxC,aAAc,EAAgCC,SAElD,eAAC6B,EAAA,EAAMO,KAAP,qBAEI,cAAC,EAAD,CACI3H,MAAM,UAAAgC,EAASY,UAAT,eAA0Bc,OAAOkE,KAAKC,SAAU,GACtD5H,OAAO,YAGf,cAACmH,EAAA,EAAMU,OAAP,UACI,cAACtC,EAAA,EAAD,CAAQuC,QAAQ,YAAYrC,QAAS,kBAAM7C,GAAmB,IAA9D,4BChSLmF,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJrE,SAASC,eAAe,SAM5ByD,M","file":"static/js/main.ac010842.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useRef } from \"react\";\nimport { FormControl, ListGroup } from \"react-bootstrap\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport { FixedSizeList } from \"react-window\";\n\nfunction FilterList<T>({ list, height }: { list: Array<T>; height: string }) {\n    const [filteredList, setFilteredList] = useState(list);\n    const searchBox = useRef(null as HTMLInputElement | null);\n\n    function handleFilterItems() {\n        const needle = searchBox.current?.value;\n        if (needle != null) {\n            setFilteredList(\n                list.filter((v) => String(v).toLowerCase().includes(needle.toLowerCase()))\n            );\n        }\n    }\n\n    return (\n        <div>\n            <FormControl placeholder=\"Search\" onChange={handleFilterItems} ref={searchBox} />\n            <ListGroup style={{ height }}>\n                <AutoSizer>\n                    {({ height, width }) => (\n                        <FixedSizeList\n                            width={width}\n                            height={height}\n                            itemSize={50}\n                            itemCount={filteredList.length}\n                        >\n                            {({ index, style }) => (\n                                <ListGroup.Item style={style}>{filteredList[index]}</ListGroup.Item>\n                            )}\n                        </FixedSizeList>\n                    )}\n                </AutoSizer>\n            </ListGroup>\n        </div>\n    );\n}\n\nexport default FilterList;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Papa, { ParseResult as PapaParseResult } from \"papaparse\";\nimport uPlot from \"uplot\";\nimport \"uplot/dist/uPlot.min.css\";\nimport { Table, Container, Modal, Button } from \"react-bootstrap\";\nimport FilterList from \"./FilterList\";\n\nfunction App() {\n    const fileInput = useRef(null as HTMLInputElement | null);\n    const rawConfig = useRef(null as HTMLTextAreaElement | null);\n    const [errorMsgs, setErrorMsgs] = useState([] as Array<string>);\n    const [datasets, setDatasets] = useState(\n        [] as Array<{ file: File | undefined; parsed: PapaParseResult<unknown> }>\n    );\n    const [visualizations, setVisualizations] = useState([\n        {\n            title: \"Steering\",\n            height: 300,\n            cursor: {\n                sync: {\n                    key: \"moo\",\n                },\n            },\n            inputs: [\n                {\n                    label: \"time (s)\",\n                    data: \"0.TimeOfUpdate\",\n                },\n                {\n                    label: \"Steering Wheel Angle (rad)\",\n                    stroke: \"red\",\n                    width: 1,\n                    data: \"0.SteeringWheelAngle\",\n                },\n                // {\n                //   label: \"Steering Wheel Angle (deg)\",\n                //   stroke: \"blue\",\n                //   width: 1,\n                // },\n            ],\n        },\n        {\n            title: \"Speed (in vehicle frame)\",\n            height: 300,\n            cursor: {\n                sync: {\n                    key: \"moo\",\n                },\n            },\n            inputs: [\n                {\n                    label: \"time (s)\",\n                    data: \"0.TimeOfUpdate\",\n                },\n                {\n                    label: \"cdgSpeed_x (m/s)\",\n                    stroke: \"blue\",\n                    width: 1,\n                    data: \"0.cdgSpeed_x\",\n                },\n                {\n                    label: \"cdgSpeed_y (m/s)\",\n                    stroke: \"green\",\n                    width: 1,\n                    data: \"0.cdgSpeed_y\",\n                },\n            ],\n        },\n    ]);\n\n    const [datasetModalID, setDatasetModalID] = useState(-1);\n\n    // plot datasets on change (rerender of the react component)\n    useEffect(() => {\n        if (visualizations.length === 0) {\n            return;\n        }\n\n        const plots = [] as Array<uPlot>;\n\n        for (let i = 0; i < visualizations.length; ++i) {\n            const visualization = visualizations[i];\n            const { title, inputs, cursor, height } = visualization;\n            const data = []; // uPlot data\n            const series = []; // uPlot series\n            for (let j = 0; j < inputs.length; ++j) {\n                const { data: dataPathStr, width, ...otherInputs } = inputs[j];\n                const dataPath = dataPathStr.split(\".\");\n                // extract the data based on the input datapath\n                const dataset = datasets[+dataPath[0]];\n                if (!dataset) {\n                    setErrorMsgs((existingMsgs) => [\n                        ...existingMsgs,\n                        `Unable to access ${dataPathStr} because dataset ${dataPath[0]} is not available!`,\n                    ]);\n                    continue;\n                }\n                data[j] = dataset.parsed.data.map(\n                    (row) => +(row as { [n: string]: number })[dataPath[1]]\n                );\n                series[j] = {\n                    width: width ? width / devicePixelRatio : undefined,\n                    ...otherInputs,\n                };\n            }\n            const opts = {\n                title,\n                cursor,\n                width: window.innerWidth,\n                height,\n                scales: {\n                    x: {\n                        time: false,\n                    },\n                },\n                series,\n            };\n\n            const plotContainer = document.getElementById(`plot-${i}`);\n\n            if (!plotContainer) {\n                setErrorMsgs((existingMsgs) => [\n                    ...existingMsgs,\n                    `Plot container not found for plot-${i}`,\n                ]);\n                return;\n            }\n\n            plots.push(new uPlot(opts, data, plotContainer));\n        }\n\n        return () => {\n            plots.forEach((plot) => plot.destroy());\n        };\n    }, [datasets, visualizations]);\n\n    function handleAddDataset() {\n        setErrorMsgs([]);\n\n        const files = fileInput.current?.files;\n        if (!files || files.length === 0) {\n            setErrorMsgs((existingMsgs) => [...existingMsgs, \"No files are selected.\"]);\n            return;\n        }\n        for (let i = 0; i < files.length; ++i) {\n            const file = files[i];\n            Papa.parse(file, {\n                header: true,\n                skipEmptyLines: true,\n                error: function parsingError(err, file) {\n                    setErrorMsgs((existingMsgs) => [\n                        ...existingMsgs,\n                        `Error parsing \"${file?.name}\". Reason: ${err.message}. Please see console for more details.`,\n                    ]);\n                    console.error(`Error Parsing ${file?.name}! Error:`, err, \"file:\", file);\n                },\n                complete: function parsingComplete(results, file) {\n                    if (results.errors.length) {\n                        setErrorMsgs((existingMsgs) => [\n                            ...existingMsgs,\n                            `Parsing \"${file?.name}\" resulted in errors. Please see console for more details`,\n                        ]);\n                        console.error(\n                            \"Parsing complete but contains errors:\",\n                            \"file:\",\n                            file,\n                            \"results:\",\n                            results\n                        );\n                    } else {\n                        console.log(\"Parsing complete!\", \"file:\", file, \"results:\", results);\n                    }\n\n                    setDatasets((existingDatasets) => [\n                        ...existingDatasets,\n                        { file, parsed: results },\n                    ]);\n                },\n            });\n        }\n    }\n\n    function handleApplyRawConfig() {\n        const rawConfigStr = rawConfig.current?.value;\n        if (!rawConfigStr) {\n            setErrorMsgs((existingMsgs) => [...existingMsgs, \"Invalid config!\"]);\n            return;\n        }\n\n        try {\n            setVisualizations(JSON.parse(rawConfigStr).visualizations);\n        } catch (error) {\n            setErrorMsgs((existingMsgs) => [\n                ...existingMsgs,\n                \"Error applying config. Please see console for more info\",\n            ]);\n            console.error(\"Error applying config:\", error);\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"Content\">\n                <Container>\n                    <h1>WATORACE Data Visualizer</h1>\n                    <p>\n                        This is pre-alpha software (\n                        <a href=\"https://github.com/WATORACE/data-visualization\">Github repo</a>).\n                    </p>\n                    <p>\n                        Select a <code>vehicleOutput</code> csv and click \"Add Dataset\" to view the\n                        current functionalities. You can safely ignore the initial errors due to\n                        dataset 0 being not available.\n                    </p>\n                    {errorMsgs.map((msg, idx) => (\n                        <p key={idx} className=\"error-message\">\n                            {msg}\n                        </p>\n                    ))}\n                    <p>{datasets.length} Dataset(s)</p>\n                    <Table bordered hover striped>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Dataset Name</th>\n                                <th>Action</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {datasets.map((dataset, idx) => (\n                                <tr>\n                                    <td className=\"align-middle\">{idx}</td>\n                                    <td className=\"align-middle\">{dataset.file?.name}</td>\n                                    <td>\n                                        <Button size=\"sm\" onClick={() => setDatasetModalID(idx)}>\n                                            More Info\n                                        </Button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                    <input type=\"file\" ref={fileInput} multiple />\n                    <button onClick={handleAddDataset}>Add Dataset</button>\n                </Container>\n                {visualizations.map((visualization, idx) => (\n                    <div key={idx} className=\"plot\">\n                        <div id={`plot-${idx}`} />\n                    </div>\n                ))}\n\n                <Container>\n                    <h2>Raw Configuration</h2>\n                    <p>\n                        This <code>&lt;textarea/&gt;</code> contains the raw configuration that\n                        generates the graphs above. You can copy the text below and share with\n                        others. You can also apply new configurations by replacing the text below\n                        and clicking \"Apply configuration\".\n                    </p>\n                    <textarea id=\"raw-config\" ref={rawConfig}>\n                        {JSON.stringify({ visualizations }, null, 4)}\n                    </textarea>\n                    <br />\n                    <button onClick={handleApplyRawConfig}>Apply Configuration</button>\n                </Container>\n            </div>\n\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <p>WATORACE Data Visualizer</p>\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n\n            <Modal\n                show={datasetModalID >= 0}\n                onHide={() => setDatasetModalID(-1)}\n                dialogClassName=\"dataset-modal\"\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>{datasets[datasetModalID]?.file?.name}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    Fields:\n                    <FilterList\n                        list={datasets[datasetModalID]?.parsed.meta.fields || []}\n                        height=\"60vh\"\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setDatasetModalID(-1)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}